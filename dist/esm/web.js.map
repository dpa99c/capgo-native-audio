{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAa3C,MAAM,OAAO,cAAe,SAAQ,SAAS;IAA7C;;QAYU,yBAAoB,GAAwB,IAAI,GAAG,EAAE,CAAC;QAEtD,iBAAY,GAAG,CAAC,CAAC;QACjB,eAAU,GAAG,CAAC,CAAC;QACf,eAAU,GAAG,MAAM,CAAC,CAAC,8DAA8D;IAkZ7F,CAAC;IAhZC,KAAK,CAAC,MAAM,CAAC,OAAe;QAC1B,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YACjB,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAe;QACzB,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,+CAA+C;QAC/E,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,OAAqB;QACxC,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,KAAK,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC;QACjC,OAAO;IACT,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,OAAe;QAClC,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAe;QAC/B,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,MAAM,uBAAuB,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YACrC,MAAM,uDAAuD,CAAC;QAChE,CAAC;QACD,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAAyB;QACvC,MAAM,uCAAuC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;IACzE,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAuB;QACvC,IAAI,CAAC;YACH,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;QAC1D,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAuB;;QACnC,IAAI,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,MAAM,yDAAyD,CAAC;QAClE,CAAC;QACD,IAAI,CAAC,CAAA,MAAA,OAAO,CAAC,SAAS,0CAAE,MAAM,CAAA,EAAE,CAAC;YAC/B,MAAM,uBAAuB,CAAC;QAChC,CAAC;QACD,cAAc,CAAC,yBAAyB,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACvE,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,IAAI,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBAChG,MAAM,WAAW,GAAW,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;gBACzE,OAAO,CAAC,SAAS,GAAG,GAAG,cAAc,CAAC,aAAa,GAAG,WAAW,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;YAC1F,CAAC;YACD,MAAM,KAAK,GAAqB,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAChE,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;YAChC,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC;YAC9B,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;YACvB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;YAEnB,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC;YAC3B,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC5C,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,CAAC;YAE1E,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC9B,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YAC/D,CAAC;iBAAM,CAAC;gBACN,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;YAC7D,CAAC;YACD,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;IACL,CAAC;IACO,OAAO,CAAC,OAAe;QAC7B,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAyB;QAClC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC;QAC9B,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACd,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,EAAE;gBAChC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACrB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACtB,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,MAAM,CAAC,OAAyB;;QAC5C,MAAM,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC;QAEtC,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YAC3D,MAAM,yBAAyB,OAAO,kCAAkC,CAAC;QAC3E,CAAC;QAED,MAAM,cAAc,GAAG,cAAc,CAAC,yBAAyB,CAAC,GAAG,CAAC,OAAO,CAAmB,CAAC;QAE/F,sHAAsH;QACtH,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAE3B,2DAA2D;QAC3D,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAEnC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAChD,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3D,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC9B,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;aAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACzD,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAC;QAED,KAAK,CAAC,IAAI,EAAE,CAAC;QACb,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAEtC,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,YAAY,GAAG,OAAO,CAAC,cAAc,IAAI,cAAc,CAAC,yBAAyB,CAAC;YACxF,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,aAAa,GAAG,MAAA,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,mCAAI,CAAC,CAAC;YACxE,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,OAAO,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxF,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,IAAI,cAAc,CAAC,yBAAyB,CAAC;YAEzF,MAAM,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC;YAEnF,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,EAAE;gBAClC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC5C,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;gBACtD,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YACxB,CAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAe;QACxB,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAAyB;QAClC,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAE1E,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,+CAA+C;QAC/E,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;YACrC,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,IAAI,cAAc,CAAC,yBAAyB,CAAC;YAEzF,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;YACtD,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,EAAE;gBAClC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC9B,CAAC,EAAE,YAAY,GAAG,IAAI,CAAC,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,KAAuB,EAAE,OAAyB;QAC/D,KAAK,CAAC,KAAK,EAAE,CAAC;QACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,KAAuB;;QACnC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;QACtB,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,cAAc,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC;YAChF,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;gBAC1B,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;gBACrC,MAAM;YACR,CAAC;QACH,CAAC;QACD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,aAAa,GAAG,MAAA,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,mCAAI,CAAC,CAAC;QACxE,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/C,CAAC;IAEO,iBAAiB;QACvB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAEO,eAAe;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAe;QAC1B,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,cAAc,CAAC,uBAAuB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC/D,cAAc,CAAC,yBAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEjE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAChC,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEO,mBAAmB,CAAC,KAAuB;QACjD,MAAM,QAAQ,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzD,IAAI,QAAQ,EAAE,CAAC;YACb,QAAQ,CAAC,UAAU,EAAE,CAAC;YACtB,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjE,IAAI,YAAY,EAAE,CAAC;YACjB,YAAY,CAAC,KAAK,EAAE,CAAC;YACrB,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,UAAU,GAAG,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtE,IAAI,UAAU,EAAE,CAAC;YACf,UAAU,CAAC,UAAU,EAAE,CAAC;YACxB,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAAoB;QAClC,IAAI,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA,KAAK,QAAQ,EAAE,CAAC;YACxC,MAAM,oBAAoB,CAAC;QAC7B,CAAC;QACD,MAAM,EAAE,MAAM,EAAE,QAAQ,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC;QAEzC,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,+CAA+C;QAC/E,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;YACjB,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC9D,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAkB;QAC9B,IAAI,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA,KAAK,QAAQ,EAAE,CAAC;YACtC,MAAM,kBAAkB,CAAC;QAC3B,CAAC;QAED,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,KAAK,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAAe;QAC7B,MAAM,KAAK,GAAqB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC1E,OAAO,EAAE,SAAS,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,UAAU;QACd,qDAAqD;QACrD,OAAO;IACT,CAAC;IAEO,aAAa,CAAC,OAAe;QACnC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAE3B,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YACzD,MAAM,yBAAyB,OAAO,kCAAkC,CAAC;QAC3E,CAAC;QAED,OAAO,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAe,CAAC;IAC3E,CAAC;IAEO,YAAY,CAAC,OAAe;QAClC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAChC,MAAM,0BAA0B,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA,EAAE,CAAC;YACrB,MAAM,qBAAqB,CAAC;QAC9B,CAAC;IACH,CAAC;IAEO,uBAAuB,CAAC,KAAuB;QACrD,IAAI,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAChD,OAAO,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAiB,CAAC;QACrE,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QACxC,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC1D,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,6BAA6B,CACnC,YAA0B,EAC1B,KAAuB;QAEvB,IAAI,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACvD,OAAO,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,CAAgC,CAAC;QAC3F,CAAC;QAED,MAAM,UAAU,GAAG,YAAY,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAChE,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAC/D,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,mBAAmB,CAAC,KAAuB,EAAE,KAAkC;QACrF,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QAEzD,IAAI,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5C,OAAO,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAa,CAAC;QAC7D,CAAC;QAED,MAAM,QAAQ,GAAG,YAAY,CAAC,UAAU,EAAE,CAAC;QAC3C,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAC1D,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAClD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,iBAAiB,CAAC,KAAuB,EAAE,MAAc,EAAE,IAAa;QAC9E,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAExD,IAAI,IAAI,EAAE,CAAC;YACT,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;aAAM,CAAC;YACN,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAEO,6BAA6B,CAAC,KAAuB,EAAE,MAAc,EAAE,QAAgB;QAC7F,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxD,IAAI,cAAc,GAAG,MAAM,CAAC;QAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,CAAC;QACD,uDAAuD;QACvD,QAAQ,CAAC,IAAI,CAAC,4BAA4B,CAAC,cAAc,EAAE,YAAY,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC;IAClG,CAAC;IAEO,wBAAwB,CAAC,KAAuB,EAAE,MAAc,EAAE,QAAgB;QACxF,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxD,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,YAAY,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC;IACrF,CAAC;IAEO,kBAAkB,CAAC,KAAuB;QAChD,MAAM,QAAQ,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzD,IAAI,QAAQ,EAAE,CAAC;YACb,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAEO,uBAAuB,CAAC,OAAe;QAC7C,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAErC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAChD,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBAClB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,yBAAyB;gBACtF,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;YAChE,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YACvC,CAAC;QACH,CAAC,EAAE,cAAc,CAAC,4BAA4B,CAAC,CAAC;QAEhD,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACrD,CAAC;IAEO,sBAAsB,CAAC,OAAgB;QAC7C,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,UAAU,EAAE,CAAC;gBACf,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC1B,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;aAAM,CAAC;YACN,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,EAAE,CAAC;gBAC5D,aAAa,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC;YACD,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;QACpC,CAAC;IACH,CAAC;;AAhauB,4BAAa,GAAW,EAAE,AAAb,CAAc;AAC3B,wCAAyB,GAAW,CAAC,AAAZ,CAAa;AACtC,2CAA4B,GAAW,GAAG,AAAd,CAAe;AAE3C,wCAAyB,GAAgC,IAAI,GAAG,EAA0B,AAAjE,CAAkE;AAC3F,sCAAuB,GAA4B,IAAI,GAAG,EAAsB,AAAzD,CAA0D;AACjF,gCAAiB,GAAwC,IAAI,GAAG,EAAE,AAAjD,CAAkD;AACnE,uCAAwB,GAAuD,IAAI,GAAG,EAAE,AAAhE,CAAiE;AACzF,4BAAa,GAAoC,IAAI,GAAG,EAAE,AAA7C,CAA8C;AAC3D,iCAAkB,GAAkC,IAAI,GAAG,EAAE,AAA3C,CAA4C;AA0ZxF,MAAM,WAAW,GAAG,IAAI,cAAc,EAAE,CAAC;AAEzC,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport { AudioAsset } from './audio-asset';\r\nimport type {\r\n  ConfigureOptions,\r\n  PreloadOptions,\r\n  AssetPlayOptions,\r\n  Assets,\r\n  AssetSetTime,\r\n  AssetVolume,\r\n  AssetRate,\r\n  AssetStopOptions,\r\n} from './definitions';\r\nimport { NativeAudio } from './definitions';\r\n\r\nexport class NativeAudioWeb extends WebPlugin implements NativeAudio {\r\n  private static readonly FILE_LOCATION: string = '';\r\n  private static readonly DEFAULT_FADE_DURATION_SEC: number = 1;\r\n  private static readonly CURRENT_TIME_UPDATE_INTERVAL: number = 100;\r\n\r\n  private static readonly AUDIO_PRELOAD_OPTIONS_MAP: Map<string, PreloadOptions> = new Map<string, PreloadOptions>();\r\n  private static readonly AUDIO_ASSET_BY_ASSET_ID: Map<string, AudioAsset> = new Map<string, AudioAsset>();\r\n  private static readonly AUDIO_CONTEXT_MAP: Map<HTMLMediaElement, AudioContext> = new Map();\r\n  private static readonly MEDIA_ELEMENT_SOURCE_MAP: Map<HTMLMediaElement, MediaElementAudioSourceNode> = new Map();\r\n  private static readonly GAIN_NODE_MAP: Map<HTMLMediaElement, GainNode> = new Map();\r\n  private static readonly INITIAL_VOLUME_MAP: Map<HTMLMediaElement, number> = new Map();\r\n\r\n  private currentTimeIntervals: Map<string, number> = new Map();\r\n\r\n  private fadeOutTimer = 0;\r\n  private startTimer = 0;\r\n  private zeroVolume = 0.0001; // Avoids the gain node being set to 0 for exponential ramping\r\n\r\n  async resume(options: Assets): Promise<void> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    this.startCurrentTimeUpdates(options.assetId);\r\n    if (audio.paused) {\r\n      return audio.play();\r\n    }\r\n  }\r\n\r\n  async pause(options: Assets): Promise<void> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    this.cancelGainNodeRamp(audio); // cancel any existing scheduled volume changes\r\n    this.clearFadeOutTimer();\r\n    this.stopCurrentTimeUpdates(options.assetId);\r\n    return audio.pause();\r\n  }\r\n\r\n  async setCurrentTime(options: AssetSetTime): Promise<void> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    audio.currentTime = options.time;\r\n    return;\r\n  }\r\n\r\n  async getCurrentTime(options: Assets): Promise<{ currentTime: number }> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    return { currentTime: audio.currentTime };\r\n  }\r\n\r\n  async getDuration(options: Assets): Promise<{ duration: number }> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    if (Number.isNaN(audio.duration)) {\r\n      throw 'no duration available';\r\n    }\r\n    if (!Number.isFinite(audio.duration)) {\r\n      throw 'duration not available => media resource is streaming';\r\n    }\r\n    return { duration: audio.duration };\r\n  }\r\n\r\n  async configure(options: ConfigureOptions): Promise<void> {\r\n    throw `configure is not supported for web: ${JSON.stringify(options)}`;\r\n  }\r\n\r\n  async isPreloaded(options: PreloadOptions): Promise<{ found: boolean }> {\r\n    try {\r\n      return { found: !!this.getAudioAsset(options.assetId) };\r\n    } catch (e) {\r\n      return { found: false };\r\n    }\r\n  }\r\n\r\n  async preload(options: PreloadOptions): Promise<void> {\r\n    if (NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.has(options.assetId)) {\r\n      throw 'AssetId already exists. Unload first if like to change!';\r\n    }\r\n    if (!options.assetPath?.length) {\r\n      throw 'no assetPath provided';\r\n    }\r\n    NativeAudioWeb.AUDIO_PRELOAD_OPTIONS_MAP.set(options.assetId, options);\r\n    await new Promise<void>((resolve, reject) => {\r\n      if (!options.isUrl && !new RegExp('^/?' + NativeAudioWeb.FILE_LOCATION).test(options.assetPath)) {\r\n        const slashPrefix: string = options.assetPath.startsWith('/') ? '' : '/';\r\n        options.assetPath = `${NativeAudioWeb.FILE_LOCATION}${slashPrefix}${options.assetPath}`;\r\n      }\r\n      const audio: HTMLAudioElement = document.createElement(\"audio\");\r\n      audio.crossOrigin = \"anonymous\";\r\n      audio.src = options.assetPath;\r\n      audio.autoplay = false;\r\n      audio.loop = false;\r\n\r\n      audio.preload = 'metadata';\r\n      audio.addEventListener('loadedmetadata', () => {\r\n        resolve();\r\n      });\r\n      audio.addEventListener('error', () => reject('Error loading audio file'));\r\n\r\n      if (options.volume) {\r\n        audio.volume = options.volume;\r\n        NativeAudioWeb.INITIAL_VOLUME_MAP.set(audio, options.volume);\r\n      } else {\r\n        NativeAudioWeb.INITIAL_VOLUME_MAP.set(audio, audio.volume);\r\n      }\r\n      NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.set(options.assetId, new AudioAsset(audio));\r\n    });\r\n  }\r\n  private onEnded(assetId: string): void {\r\n    this.notifyListeners('complete', { assetId });\r\n  }\r\n\r\n  async play(options: AssetPlayOptions): Promise<void> {\r\n    this.clearFadeOutTimer();\r\n    const { delay = 0 } = options;\r\n    if (delay > 0) {\r\n      this.startTimer = setTimeout(() => {\r\n        this.doPlay(options);\r\n        this.startTimer = 0;\r\n      }, delay * 1000);\r\n    } else {\r\n      await this.doPlay(options);\r\n    }\r\n  }\r\n\r\n  private async doPlay(options: AssetPlayOptions): Promise<void> {\r\n    const { assetId, time = 0 } = options;\r\n\r\n    if (!NativeAudioWeb.AUDIO_PRELOAD_OPTIONS_MAP.has(assetId)) {\r\n      throw `no asset for assetId \"${assetId}\" available. Call preload first!`;\r\n    }\r\n\r\n    const preloadOptions = NativeAudioWeb.AUDIO_PRELOAD_OPTIONS_MAP.get(assetId) as PreloadOptions;\r\n\r\n    // unload asset to create a new HTMLAudioElement because reusing the same element causes issues with the audio context\r\n    await this.unload(options);\r\n\r\n    // preload the asset again to create a new HTMLAudioElement\r\n    await this.preload(preloadOptions);\r\n\r\n    const audio = this.getAudioAsset(assetId).audio;\r\n    audio.loop = false;\r\n    audio.currentTime = time;\r\n    audio.addEventListener('ended', () => this.onEnded(assetId), {\r\n      once: true,\r\n    });\r\n\r\n    if (options.volume) {\r\n      audio.volume = options.volume;\r\n      NativeAudioWeb.INITIAL_VOLUME_MAP.set(audio, options.volume);\r\n      this.setGainNodeVolume(audio, options.volume);\r\n    } else if (!NativeAudioWeb.INITIAL_VOLUME_MAP.has(audio)) {\r\n      NativeAudioWeb.INITIAL_VOLUME_MAP.set(audio, audio.volume);\r\n    }\r\n\r\n    audio.play();\r\n    this.startCurrentTimeUpdates(assetId);\r\n\r\n    if (options.fadeIn) {\r\n      const fadeDuration = options.fadeInDuration || NativeAudioWeb.DEFAULT_FADE_DURATION_SEC;\r\n      this.setGainNodeVolume(audio, 0);\r\n      const initialVolume = NativeAudioWeb.INITIAL_VOLUME_MAP.get(audio) ?? 1;\r\n      this.linearRampGainNodeVolume(audio, initialVolume, fadeDuration);\r\n    }\r\n\r\n    if (options.fadeOut && !Number.isNaN(audio.duration) && Number.isFinite(audio.duration)) {\r\n      const fadeDuration = options.fadeOutDuration || NativeAudioWeb.DEFAULT_FADE_DURATION_SEC;\r\n\r\n      const fadeOutStartTime = options.fadeOutStartTime || audio.duration - fadeDuration;\r\n\r\n      this.fadeOutTimer = setTimeout(() => {\r\n        this.setGainNodeVolume(audio, audio.volume);\r\n        this.linearRampGainNodeVolume(audio, 0, fadeDuration);\r\n        this.fadeOutTimer = 0;\r\n      }, fadeOutStartTime * 1000);\r\n    }\r\n  }\r\n\r\n  async loop(options: Assets): Promise<void> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    this.reset(audio);\r\n    audio.loop = true;\r\n    this.startCurrentTimeUpdates(options.assetId);\r\n    return audio.play();\r\n  }\r\n\r\n  async stop(options: AssetStopOptions): Promise<void> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n\r\n    this.clearFadeOutTimer();\r\n    this.cancelGainNodeRamp(audio); // cancel any existing scheduled volume changes\r\n    if (!audio.paused && options.fadeOut) {\r\n      const fadeDuration = options.fadeOutDuration || NativeAudioWeb.DEFAULT_FADE_DURATION_SEC;\r\n\r\n      this.linearRampGainNodeVolume(audio, 0, fadeDuration);\r\n      this.fadeOutTimer = setTimeout(() => {\r\n        this.doStop(audio, options);\r\n      }, fadeDuration * 1000);\r\n    } else {\r\n      this.doStop(audio, options);\r\n    }\r\n  }\r\n\r\n  private doStop(audio: HTMLAudioElement, options: AssetStopOptions): void {\r\n    audio.pause();\r\n    this.onEnded(options.assetId);\r\n    this.reset(audio);\r\n  }\r\n\r\n  private reset(audio: HTMLAudioElement): void {\r\n    audio.currentTime = 0;\r\n    for (const [assetId, asset] of NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.entries()) {\r\n      if (asset.audio === audio) {\r\n        this.stopCurrentTimeUpdates(assetId);\r\n        break;\r\n      }\r\n    }\r\n    this.clearFadeOutTimer();\r\n    this.clearStartTimer();\r\n    this.cancelGainNodeRamp(audio);\r\n    const initialVolume = NativeAudioWeb.INITIAL_VOLUME_MAP.get(audio) ?? 1;\r\n    this.setGainNodeVolume(audio, initialVolume);\r\n  }\r\n\r\n  private clearFadeOutTimer(): void {\r\n    if (this.fadeOutTimer) {\r\n      clearTimeout(this.fadeOutTimer);\r\n      this.fadeOutTimer = 0;\r\n    }\r\n  }\r\n\r\n  private clearStartTimer(): void {\r\n    if (this.startTimer) {\r\n      clearTimeout(this.startTimer);\r\n      this.startTimer = 0;\r\n    }\r\n  }\r\n\r\n  async unload(options: Assets): Promise<void> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    this.reset(audio);\r\n    NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.delete(options.assetId);\r\n    NativeAudioWeb.AUDIO_PRELOAD_OPTIONS_MAP.delete(options.assetId);\r\n\r\n    this.cleanupAudioContext(audio);\r\n    NativeAudioWeb.INITIAL_VOLUME_MAP.delete(audio);\r\n  }\r\n\r\n  private cleanupAudioContext(audio: HTMLMediaElement): void {\r\n    const gainNode = NativeAudioWeb.GAIN_NODE_MAP.get(audio);\r\n    if (gainNode) {\r\n      gainNode.disconnect();\r\n      NativeAudioWeb.GAIN_NODE_MAP.delete(audio);\r\n    }\r\n    const audioContext = NativeAudioWeb.AUDIO_CONTEXT_MAP.get(audio);\r\n    if (audioContext) {\r\n      audioContext.close();\r\n      NativeAudioWeb.AUDIO_CONTEXT_MAP.delete(audio);\r\n    }\r\n    const sourceNode = NativeAudioWeb.MEDIA_ELEMENT_SOURCE_MAP.get(audio);\r\n    if (sourceNode) {\r\n      sourceNode.disconnect();\r\n      NativeAudioWeb.MEDIA_ELEMENT_SOURCE_MAP.delete(audio);\r\n    }\r\n  }\r\n\r\n  async setVolume(options: AssetVolume): Promise<void> {\r\n    if (typeof options?.volume !== 'number') {\r\n      throw 'no volume provided';\r\n    }\r\n    const { volume, duration = 0 } = options;\r\n\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    this.cancelGainNodeRamp(audio); // cancel any existing scheduled volume changes\r\n    if (duration > 0) {\r\n      this.exponentialRampGainNodeVolume(audio, volume, duration);\r\n    } else {\r\n      audio.volume = volume;\r\n    }\r\n  }\r\n\r\n  async setRate(options: AssetRate): Promise<void> {\r\n    if (typeof options?.rate !== 'number') {\r\n      throw 'no rate provided';\r\n    }\r\n\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    audio.playbackRate = options.rate;\r\n  }\r\n\r\n  async isPlaying(options: Assets): Promise<{ isPlaying: boolean }> {\r\n    const audio: HTMLAudioElement = this.getAudioAsset(options.assetId).audio;\r\n    return { isPlaying: !audio.paused };\r\n  }\r\n\r\n  async clearCache(): Promise<void> {\r\n    // Web audio doesn't have a persistent cache to clear\r\n    return;\r\n  }\r\n\r\n  private getAudioAsset(assetId: string): AudioAsset {\r\n    this.checkAssetId(assetId);\r\n\r\n    if (!NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.has(assetId)) {\r\n      throw `no asset for assetId \"${assetId}\" available. Call preload first!`;\r\n    }\r\n\r\n    return NativeAudioWeb.AUDIO_ASSET_BY_ASSET_ID.get(assetId) as AudioAsset;\r\n  }\r\n\r\n  private checkAssetId(assetId: string): void {\r\n    if (typeof assetId !== 'string') {\r\n      throw 'assetId must be a string';\r\n    }\r\n\r\n    if (!assetId?.length) {\r\n      throw 'no assetId provided';\r\n    }\r\n  }\r\n\r\n  private getOrCreateAudioContext(audio: HTMLMediaElement): AudioContext {\r\n    if (NativeAudioWeb.AUDIO_CONTEXT_MAP.has(audio)) {\r\n      return NativeAudioWeb.AUDIO_CONTEXT_MAP.get(audio) as AudioContext;\r\n    }\r\n\r\n    const audioContext = new AudioContext();\r\n    NativeAudioWeb.AUDIO_CONTEXT_MAP.set(audio, audioContext);\r\n    return audioContext;\r\n  }\r\n\r\n  private getOrCreateMediaElementSource(\r\n    audioContext: AudioContext,\r\n    audio: HTMLAudioElement,\r\n  ): MediaElementAudioSourceNode {\r\n    if (NativeAudioWeb.MEDIA_ELEMENT_SOURCE_MAP.has(audio)) {\r\n      return NativeAudioWeb.MEDIA_ELEMENT_SOURCE_MAP.get(audio) as MediaElementAudioSourceNode;\r\n    }\r\n\r\n    const sourceNode = audioContext.createMediaElementSource(audio);\r\n    NativeAudioWeb.MEDIA_ELEMENT_SOURCE_MAP.set(audio, sourceNode);\r\n    return sourceNode;\r\n  }\r\n\r\n  private getOrCreateGainNode(audio: HTMLMediaElement, track: MediaElementAudioSourceNode): GainNode {\r\n    const audioContext = this.getOrCreateAudioContext(audio);\r\n\r\n    if (NativeAudioWeb.GAIN_NODE_MAP.has(audio)) {\r\n      return NativeAudioWeb.GAIN_NODE_MAP.get(audio) as GainNode;\r\n    }\r\n\r\n    const gainNode = audioContext.createGain();\r\n    track.connect(gainNode).connect(audioContext.destination);\r\n    NativeAudioWeb.GAIN_NODE_MAP.set(audio, gainNode);\r\n    return gainNode;\r\n  }\r\n\r\n  private setGainNodeVolume(audio: HTMLMediaElement, volume: number, time?: number): void {\r\n    const audioContext = this.getOrCreateAudioContext(audio);\r\n    const track = this.getOrCreateMediaElementSource(audioContext, audio);\r\n    const gainNode = this.getOrCreateGainNode(audio, track);\r\n\r\n    if (time) {\r\n      gainNode.gain.setValueAtTime(volume, time);\r\n    } else {\r\n      gainNode.gain.setValueAtTime(volume, audioContext.currentTime);\r\n    }\r\n  }\r\n\r\n  private exponentialRampGainNodeVolume(audio: HTMLMediaElement, volume: number, duration: number): void {\r\n    const audioContext = this.getOrCreateAudioContext(audio);\r\n    const track = this.getOrCreateMediaElementSource(audioContext, audio);\r\n    const gainNode = this.getOrCreateGainNode(audio, track);\r\n    let adjustedVolume = volume;\r\n    if (volume < this.zeroVolume) {\r\n      adjustedVolume = this.zeroVolume;\r\n    }\r\n    // Use exponential ramping for human hearing perception\r\n    gainNode.gain.exponentialRampToValueAtTime(adjustedVolume, audioContext.currentTime + duration);\r\n  }\r\n\r\n  private linearRampGainNodeVolume(audio: HTMLMediaElement, volume: number, duration: number): void {\r\n    const audioContext = this.getOrCreateAudioContext(audio);\r\n    const track = this.getOrCreateMediaElementSource(audioContext, audio);\r\n    const gainNode = this.getOrCreateGainNode(audio, track);\r\n    gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + duration);\r\n  }\r\n\r\n  private cancelGainNodeRamp(audio: HTMLMediaElement): void {\r\n    const gainNode = NativeAudioWeb.GAIN_NODE_MAP.get(audio);\r\n    if (gainNode) {\r\n      gainNode.gain.cancelScheduledValues(0);\r\n    }\r\n  }\r\n\r\n  private startCurrentTimeUpdates(assetId: string): void {\r\n    this.stopCurrentTimeUpdates(assetId);\r\n\r\n    const audio = this.getAudioAsset(assetId).audio;\r\n    const intervalId = window.setInterval(() => {\r\n      if (!audio.paused) {\r\n        const currentTime = Math.round(audio.currentTime * 10) / 10; // Round to nearest 100ms\r\n        this.notifyListeners('currentTime', { assetId, currentTime });\r\n      } else {\r\n        this.stopCurrentTimeUpdates(assetId);\r\n      }\r\n    }, NativeAudioWeb.CURRENT_TIME_UPDATE_INTERVAL);\r\n\r\n    this.currentTimeIntervals.set(assetId, intervalId);\r\n  }\r\n\r\n  private stopCurrentTimeUpdates(assetId?: string): void {\r\n    if (assetId) {\r\n      const intervalId = this.currentTimeIntervals.get(assetId);\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n        this.currentTimeIntervals.delete(assetId);\r\n      }\r\n    } else {\r\n      for (const intervalId of this.currentTimeIntervals.values()) {\r\n        clearInterval(intervalId);\r\n      }\r\n      this.currentTimeIntervals.clear();\r\n    }\r\n  }\r\n}\r\n\r\nconst NativeAudio = new NativeAudioWeb();\r\n\r\nexport { NativeAudio };\r\n"]}