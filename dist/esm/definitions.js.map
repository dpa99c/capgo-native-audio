{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\r\n\r\nexport interface CompletedEvent {\r\n  /**\r\n   * Emit when a play completes\r\n   *\r\n   * @since  5.0.0\r\n   */\r\n  assetId: string;\r\n}\r\n\r\nexport type CompletedListener = (state: CompletedEvent) => void;\r\n\r\nexport interface Assets {\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n}\r\n\r\nexport interface AssetVolume {\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n  /**\r\n   * Volume of the audio, between 0.1 and 1.0\r\n   */\r\n  volume: number;\r\n  /**\r\n   * Time over which to fade to the target volume, in seconds. Default is 0s (immediate).\r\n   */\r\n  duration?: number;\r\n}\r\n\r\nexport interface AssetRate {\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n  /**\r\n   * Rate of the audio, between 0.1 and 1.0\r\n   */\r\n  rate: number;\r\n}\r\n\r\nexport interface AssetSetTime {\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n  /**\r\n   * Time to set the audio, in seconds\r\n   */\r\n  time: number;\r\n}\r\n\r\nexport interface AssetPlayOptions {\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n  /**\r\n   * Time to start playing the audio, in seconds\r\n   */\r\n  time?: number;\r\n  /**\r\n   * Delay to start playing the audio, in seconds\r\n   */\r\n  delay?: number;\r\n\r\n  /**\r\n   * Volume of the audio, between 0.1 and 1.0\r\n   */\r\n  volume?: number;\r\n\r\n  /**\r\n   * Whether to fade in the audio\r\n   */\r\n  fadeIn?: boolean;\r\n\r\n  /**\r\n   * Whether to fade out the audio\r\n   */\r\n  fadeOut?: boolean;\r\n\r\n  /**\r\n   * Fade in duration in seconds.\r\n   * Only used if fadeIn is true.\r\n   * Default is 1s.\r\n   */\r\n  fadeInDuration?: number;\r\n\r\n  /**\r\n   * Fade out duration in seconds.\r\n   * Only used if fadeOut is true.\r\n   * Default is 1s.\r\n   */\r\n  fadeOutDuration?: number;\r\n\r\n  /**\r\n   * Time in seconds from the start of the audio to start fading out.\r\n   * Only used if fadeOut is true.\r\n   * Default is fadeOutDuration before end of audio.\r\n   */\r\n  fadeOutStartTime?: number;\r\n}\r\n\r\nexport interface AssetStopOptions {\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n\r\n  /**\r\n   * Whether to fade out the audio before stopping\r\n   */\r\n  fadeOut?: boolean;\r\n\r\n  /**\r\n   * Fade out duration in seconds.\r\n   * Default is 1s.\r\n   */\r\n  fadeOutDuration?: number;\r\n}\r\n\r\nexport interface ConfigureOptions {\r\n  /**\r\n   * focus the audio with Audio Focus\r\n   */\r\n  focus?: boolean;\r\n  /**\r\n   * Play the audio in the background\r\n   */\r\n  background?: boolean;\r\n  /**\r\n   * Ignore silent mode, works only on iOS setting this will nuke other audio apps\r\n   */\r\n  ignoreSilent?: boolean;\r\n}\r\n\r\nexport interface PreloadOptions {\r\n  /**\r\n   * Path to the audio file, relative path of the file, absolute url (file://) or remote url (https://)\r\n   * Supported formats:\r\n   * - MP3, WAV (all platforms)\r\n   * - M3U8/HLS streams (iOS and Android)\r\n   */\r\n  assetPath: string;\r\n  /**\r\n   * Asset Id, unique identifier of the file\r\n   */\r\n  assetId: string;\r\n  /**\r\n   * Volume of the audio, between 0.1 and 1.0\r\n   */\r\n  volume?: number;\r\n  /**\r\n   * Audio channel number, default is 1\r\n   */\r\n  audioChannelNum?: number;\r\n  /**\r\n   * Is the audio file a URL, pass true if assetPath is a `file://` url\r\n   * or a streaming URL (m3u8)\r\n   */\r\n  isUrl?: boolean;\r\n}\r\n\r\nexport interface CurrentTimeEvent {\r\n  /**\r\n   * Current time of the audio in seconds\r\n   * @since 6.5.0\r\n   */\r\n  currentTime: number;\r\n  /**\r\n   * Asset Id of the audio\r\n   * @since 6.5.0\r\n   */\r\n  assetId: string;\r\n}\r\n\r\nexport type CurrentTimeListener = (state: CurrentTimeEvent) => void;\r\n\r\nexport interface NativeAudio {\r\n  /**\r\n   * Configure the audio player\r\n   * @since 5.0.0\r\n   * @param option {@link ConfigureOptions}\r\n   * @returns\r\n   */\r\n  configure(options: ConfigureOptions): Promise<void>;\r\n\r\n  /**\r\n   * Load an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link PreloadOptions}\r\n   * @returns\r\n   */\r\n  preload(options: PreloadOptions): Promise<void>;\r\n\r\n  /**\r\n   * Check if an audio file is preloaded\r\n   *\r\n   * @since 6.1.0\r\n   * @param option {@link Assets}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  isPreloaded(options: PreloadOptions): Promise<{ found: boolean }>;\r\n\r\n  /**\r\n   * Play an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link AssetPlayOptions}\r\n   * @returns\r\n   */\r\n  play(options: AssetPlayOptions): Promise<void>;\r\n\r\n  /**\r\n   * Pause an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns\r\n   */\r\n  pause(options: Assets): Promise<void>;\r\n\r\n  /**\r\n   * Resume an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns\r\n   */\r\n  resume(options: Assets): Promise<void>;\r\n\r\n  /**\r\n   * Stop an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns\r\n   */\r\n  loop(options: Assets): Promise<void>;\r\n\r\n  /**\r\n   * Stop an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link AssetStopOptions}\r\n   * @returns\r\n   */\r\n  stop(options: AssetStopOptions): Promise<void>;\r\n\r\n  /**\r\n   * Unload an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns\r\n   */\r\n  unload(options: Assets): Promise<void>;\r\n\r\n  /**\r\n   * Set the volume of an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link AssetVolume}\r\n   * @returns {Promise<void>}\r\n   */\r\n  setVolume(options: AssetVolume): Promise<void>;\r\n\r\n  /**\r\n   * Set the rate of an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link AssetRate}\r\n   * @returns {Promise<void>}\r\n   */\r\n  setRate(options: AssetRate): Promise<void>;\r\n\r\n  /**\r\n   * Set the current time of an audio file\r\n   * @since 6.5.0\r\n   * @param option {@link AssetSetTime}\r\n   * @returns {Promise<void>}\r\n   */\r\n  setCurrentTime(options: AssetSetTime): Promise<void>;\r\n\r\n  /**\r\n   * Get the current time of an audio file\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns {Promise<{ currentTime: number }>}\r\n   */\r\n  getCurrentTime(options: Assets): Promise<{ currentTime: number }>;\r\n\r\n  /**\r\n   * Get the duration of an audio file in seconds\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns {Promise<{ duration: number }>}\r\n   */\r\n  getDuration(options: Assets): Promise<{ duration: number }>;\r\n\r\n  /**\r\n   * Check if an audio file is playing\r\n   *\r\n   * @since 5.0.0\r\n   * @param option {@link Assets}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  isPlaying(options: Assets): Promise<{ isPlaying: boolean }>;\r\n\r\n  /**\r\n   * Listen for complete event\r\n   *\r\n   * @since 5.0.0\r\n   * return {@link CompletedEvent}\r\n   */\r\n  addListener(eventName: 'complete', listenerFunc: CompletedListener): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Listen for current time updates\r\n   * Emits every 100ms while audio is playing\r\n   *\r\n   * @since 6.5.0\r\n   * return {@link CurrentTimeEvent}\r\n   */\r\n  addListener(eventName: 'currentTime', listenerFunc: CurrentTimeListener): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Clear the audio cache for remote audio files\r\n   * @since 6.5.0\r\n   * @returns {Promise<void>}\r\n   */\r\n  clearCache(): Promise<void>;\r\n}\r\n"]}