{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface CompletedEvent {\n  /**\n   * Emit when a play completes\n   *\n   * @since  5.0.0\n   */\n  assetId: string;\n}\n\nexport type CompletedListener = (state: CompletedEvent) => void;\n\nexport interface Assets {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n}\n\nexport interface AssetVolume {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n  /**\n   * Volume of the audio, between 0.1 and 1.0\n   */\n  volume: number;\n  /**\n   * Time over which to fade to the target volume, in seconds. Default is 0s (immediate).\n   */\n  duration?: number;\n}\n\nexport interface AssetRate {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n  /**\n   * Rate of the audio, between 0.1 and 1.0\n   */\n  rate: number;\n}\n\nexport interface AssetSetTime {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n  /**\n   * Time to set the audio, in seconds\n   */\n  time: number;\n}\n\nexport interface AssetPlayOptions {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n  /**\n   * Time to start playing the audio, in seconds\n   */\n  time?: number;\n  /**\n   * Delay to start playing the audio, in seconds\n   */\n  delay?: number;\n\n  /**\n   * Volume of the audio, between 0.1 and 1.0\n   */\n  volume?: number;\n\n  /**\n   * Whether to fade in the audio\n   */\n  fadeIn?: boolean;\n\n  /**\n   * Whether to fade out the audio\n   */\n  fadeOut?: boolean;\n\n  /**\n   * Fade in duration in seconds.\n   * Only used if fadeIn is true.\n   * Default is 1s.\n   */\n  fadeInDuration?: number;\n\n  /**\n   * Fade out duration in seconds.\n   * Only used if fadeOut is true.\n   * Default is 1s.\n   */\n  fadeOutDuration?: number;\n\n  /**\n   * Time in seconds from the start of the audio to start fading out.\n   * Only used if fadeOut is true.\n   * Default is fadeOutDuration before end of audio.\n   */\n  fadeOutStartTime?: number;\n}\n\nexport interface AssetStopOptions {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n\n  /**\n   * Whether to fade out the audio before stopping\n   */\n  fadeOut?: boolean;\n\n  /**\n   * Fade out duration in seconds.\n   * Default is 1s.\n   */\n  fadeOutDuration?: number;\n}\n\nexport interface AssetPauseOptions {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n\n  /**\n   * Whether to fade out the audio before pausing\n   */\n  fadeOut?: boolean;\n\n  /**\n   * Fade out duration in seconds.\n   * Default is 1s.\n   */\n  fadeOutDuration?: number;\n}\n\nexport interface AssetResumeOptions {\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n\n  /**\n   * Whether to fade in the audio during resume\n   */\n  fadeIn?: boolean;\n\n  /**\n   * Fade in duration in seconds.\n   * Default is 1s.\n   */\n  fadeInDuration?: number;\n}\n\nexport interface ConfigureOptions {\n  /**\n   * focus the audio with Audio Focus\n   */\n  focus?: boolean;\n  /**\n   * Play the audio in the background\n   */\n  background?: boolean;\n  /**\n   * Ignore silent mode, works only on iOS setting this will nuke other audio apps\n   */\n  ignoreSilent?: boolean;\n}\n\nexport interface PreloadOptions {\n  /**\n   * Path to the audio file, relative path of the file, absolute url (file://) or remote url (https://)\n   * Supported formats:\n   * - MP3, WAV (all platforms)\n   * - M3U8/HLS streams (iOS and Android)\n   */\n  assetPath: string;\n  /**\n   * Asset Id, unique identifier of the file\n   */\n  assetId: string;\n  /**\n   * Volume of the audio, between 0.1 and 1.0\n   */\n  volume?: number;\n  /**\n   * Audio channel number, default is 1\n   */\n  audioChannelNum?: number;\n  /**\n   * Is the audio file a URL, pass true if assetPath is a `file://` url\n   * or a streaming URL (m3u8)\n   */\n  isUrl?: boolean;\n}\n\nexport interface CurrentTimeEvent {\n  /**\n   * Current time of the audio in seconds\n   * @since 6.5.0\n   */\n  currentTime: number;\n  /**\n   * Asset Id of the audio\n   * @since 6.5.0\n   */\n  assetId: string;\n}\n\nexport type CurrentTimeListener = (state: CurrentTimeEvent) => void;\n\nexport interface NativeAudio {\n  /**\n   * Configure the audio player\n   * @since 5.0.0\n   * @param option {@link ConfigureOptions}\n   * @returns\n   */\n  configure(options: ConfigureOptions): Promise<void>;\n\n  /**\n   * Load an audio file\n   * @since 5.0.0\n   * @param option {@link PreloadOptions}\n   * @returns\n   */\n  preload(options: PreloadOptions): Promise<void>;\n\n  /**\n   * Check if an audio file is preloaded\n   *\n   * @since 6.1.0\n   * @param option {@link Assets}\n   * @returns {Promise<boolean>}\n   */\n  isPreloaded(options: PreloadOptions): Promise<{ found: boolean }>;\n\n  /**\n   * Play an audio file\n   * @since 5.0.0\n   * @param option {@link AssetPlayOptions}\n   * @returns\n   */\n  play(options: AssetPlayOptions): Promise<void>;\n\n  /**\n   * Pause an audio file\n   * @since 5.0.0\n   * @param option {@link AssetPauseOptions}\n   * @returns\n   */\n  pause(options: AssetPauseOptions): Promise<void>;\n\n  /**\n   * Resume an audio file\n   * @since 5.0.0\n   * @param option {@link AssetResumeOptions}\n   * @returns\n   */\n  resume(options: AssetResumeOptions): Promise<void>;\n\n  /**\n   * Stop an audio file\n   * @since 5.0.0\n   * @param option {@link Assets}\n   * @returns\n   */\n  loop(options: Assets): Promise<void>;\n\n  /**\n   * Stop an audio file\n   * @since 5.0.0\n   * @param option {@link AssetStopOptions}\n   * @returns\n   */\n  stop(options: AssetStopOptions): Promise<void>;\n\n  /**\n   * Unload an audio file\n   * @since 5.0.0\n   * @param option {@link Assets}\n   * @returns\n   */\n  unload(options: Assets): Promise<void>;\n\n  /**\n   * Set the volume of an audio file\n   * @since 5.0.0\n   * @param option {@link AssetVolume}\n   * @returns {Promise<void>}\n   */\n  setVolume(options: AssetVolume): Promise<void>;\n\n  /**\n   * Set the rate of an audio file\n   * @since 5.0.0\n   * @param option {@link AssetRate}\n   * @returns {Promise<void>}\n   */\n  setRate(options: AssetRate): Promise<void>;\n\n  /**\n   * Set the current time of an audio file\n   * @since 6.5.0\n   * @param option {@link AssetSetTime}\n   * @returns {Promise<void>}\n   */\n  setCurrentTime(options: AssetSetTime): Promise<void>;\n\n  /**\n   * Get the current time of an audio file\n   * @since 5.0.0\n   * @param option {@link Assets}\n   * @returns {Promise<{ currentTime: number }>}\n   */\n  getCurrentTime(options: Assets): Promise<{ currentTime: number }>;\n\n  /**\n   * Get the duration of an audio file in seconds\n   * @since 5.0.0\n   * @param option {@link Assets}\n   * @returns {Promise<{ duration: number }>}\n   */\n  getDuration(options: Assets): Promise<{ duration: number }>;\n\n  /**\n   * Check if an audio file is playing\n   *\n   * @since 5.0.0\n   * @param option {@link Assets}\n   * @returns {Promise<boolean>}\n   */\n  isPlaying(options: Assets): Promise<{ isPlaying: boolean }>;\n\n  /**\n   * Listen for complete event\n   *\n   * @since 5.0.0\n   * return {@link CompletedEvent}\n   */\n  addListener(eventName: 'complete', listenerFunc: CompletedListener): Promise<PluginListenerHandle>;\n\n  /**\n   * Listen for current time updates\n   * Emits every 100ms while audio is playing\n   *\n   * @since 6.5.0\n   * return {@link CurrentTimeEvent}\n   */\n  addListener(eventName: 'currentTime', listenerFunc: CurrentTimeListener): Promise<PluginListenerHandle>;\n\n  /**\n   * Clear the audio cache for remote audio files\n   * @since 6.5.0\n   * @returns {Promise<void>}\n   */\n  clearCache(): Promise<void>;\n\n  /**\n   * Set the debug mode\n   * @since 6.5.0\n   * @param options - Options to enable or disable debug mode\n   * @param {boolean} options.enabled - Whether to enable or disable debug mode\n   * @returns {Promise<void>}\n   */\n  setDebugMode(options: { enabled: boolean }): Promise<void>;\n}\n"]}